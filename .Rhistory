library(plyr)
library(dplyr)
library(plotly)
library(scales)
library(maps)
# Source helpers ----
source("helpers.R")
mapData <- joinCountryData2Map(data2, joinCode = "ISO3", nameJoinColumn = "countryterritoryCode")
library(rworldmap)
install.packages(rworldmap)
install.packages(’rworldmap’,dependencies=TRUE)
install.packages(rworldmap,dependencies=TRUE)
require(rworldmap)
library(rworldmap)
install.packages("rworldmap")
library(rworldmap)
mapData <- joinCountryData2Map(data2, joinCode = "ISO3", nameJoinColumn = "countryterritoryCode")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
View(mapData)
# Load packages ----
library(shiny)
library(ggplot2)
library(tidyverse)
library(plyr)
library(dplyr)
library(plotly)
library(scales)
library(maps)
library(rworldmap)
# Source helpers ----
source("helpers.R")
# User interface ----
ui <- fluidPage(
titlePanel(""),
sidebarLayout(
sidebarPanel(
selectizeInput("countries", label ="Choose a country", choices = data2$countriesAndTerritories),
selectizeInput("countries2", label = "Choose a country", choices = data2$countriesAndTerritories),
dateRangeInput("date", label = "Date range"),
checkboxInput("cumulative", label = "Cumulative number of cases"),
checkboxInput("logarithmicScale", label = "Logarithmic scale")
),
mainPanel(
plotOutput("mainpanelplot"),
plotOutput("worldmap")
)
)
)
# Server logic
server <- function(input, output){
# filters data (input$countries & input$date)
countrydata <- reactive({
filter(data2,
countriesAndTerritories == input$countries,
dateRep >= input$date[1],
dateRep <= input$date[2]
)
})
# filters data (input$countries2 & input$date)
countrydata2 <- reactive({
filter(data2,
countriesAndTerritories == input$countries2,
dateRep >= input$date[1],
dateRep <= input$date[2]
)
})
#adds cumulative cases to countrydata
countrydataCumsum <- reactive({
countrydata() %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases))
})
#adds cumulative cases to countrydata2
countrydataCumsum2 <- reactive({
countrydata2() %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases))
})
#Create plot
output$mainpanelplot <- renderPlot({
p = ggplot()
if (input$cumulative) {
p = p +
geom_line(data = countrydataCumsum(), aes(x = dateRep, y = cumsumCases, color = countriesAndTerritories)) +
geom_line(data = countrydataCumsum2(), aes(x = dateRep, y = cumsumCases, color = countriesAndTerritories)) +
geom_point(data = countrydataCumsum(), aes(x = dateRep, y = cumsumCases, color = countriesAndTerritories)) +
geom_point(data = countrydataCumsum2(), aes(x = dateRep, y = cumsumCases, color = countriesAndTerritories)) +
ylab("Cumulative number of cases")
} else {
p = p +
geom_line(data = countrydata(), aes(x = dateRep, y = cases, color = countriesAndTerritories)) +
geom_line(data = countrydata2(), aes(x = dateRep, y = cases, color = countriesAndTerritories)) +
geom_point(data = countrydata(), aes(x = dateRep, y = cases, color = countriesAndTerritories)) +
geom_point(data = countrydata2(), aes(x = dateRep, y = cases, color = countriesAndTerritories)) +
ylab("Number of new cases")
}
if (input$logarithmicScale){
p = p +
scale_y_continuous(trans = 'log10')
} else {
p = p +
scale_y_continuous(breaks = pretty_breaks())
}
p = p +
expand_limits(y = 0) +
xlab("Date") +
theme_bw()
p
})
#Create map
#filters data: input$date
dateData <- reactive({
filter(data2,
dateRep >= input$date[1],
dateRep <= input$date[2]
)
})
#adds cumulative cases to datedata
dateDataCumsum <- reactive({
dateData() %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases))
})
mapData <- joinCountryData2Map(data2, joinCode = "ISO2", nameJoinColumn = "geold")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
head(dateDataCumsum)
head(dateData)
data3 <- data2 %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases))
View(data3)
data3 <- data2 %>%
group_by(geoID) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases))
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases))
View(data3)
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases)) %>%
filter(cumsumCases == max(cumsumCases))
View(data3)
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases)) %>%
filter(cumsumCases == max(cumsumCases) && dateRep == "2020-04-09")
View(data3)
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases)) %>%
filter(dateRep == "2020-04-09")
View(data3)
View(data2)
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases)) %>%
filter(dateRep == 2020-04-09)
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases))
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases)) %>%
filter(dateRep == "2020-04-07")
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases))
View(data3)
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases)) %>%
filter(dateRep == Sys.Date())
View(data3)
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases)) %>%
filter(dateRep == Sys.Date())
mapData <- joinCountryData2Map(data3, joinCode = "ISO2", nameJoinColumn = "geoId")
mapData <- joinCountryData2Map(data3, joinCode = "ISO3", nameJoinColumn = "countryterritoryCode")
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases)) %>%
filter(dateRep == Sys.Date())
mapData <- joinCountryData2Map(data3, joinCode = "ISO3", nameJoinColumn = "countryterritoryCode")
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases)) %>%
filter(dateRep == Sys.Date())
mapData <- joinCountryData2Map(data3, joinCode = "ISO3", nameJoinColumn = "countryterritoryCode")
output$worldmap <- mapCountryData(mapData, nameColumnToPlot="cumsumCases" )
runApp("corona", display.mode = "showcase")
mapWorld <- borders("world", colour="gray40", fill="data3$cumsumCases")
runApp("corona", display.mode = "showcase")
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases)) %>%
filter(dateRep == Sys.Date())
mapData <- joinCountryData2Map(data3, joinCode = "ISO3", nameJoinColumn = "countryterritoryCode")
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases)) %>%
filter(dateRep == Sys.Date())
mapData <- joinCountryData2Map(data3, joinCode = "ISO3", nameJoinColumn = "countryterritoryCode")
ggplot(data = world)
ggplot(data = world) +
geom_sf()
install.packages(c("cowplot", "googleway", "ggplot2", "ggrepel",
"ggspatial", "libwgeom", "sf", "rnaturalearth", "rnaturalearthdata")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases)) %>%
filter(dateRep == Sys.Date())
mapData <- joinCountryData2Map(data3, joinCode = "ISO3", nameJoinColumn = "countryterritoryCode")
# Load packages ----
library(shiny)
library(ggplot2)
library(tidyverse)
library(plyr)
library(dplyr)
library(plotly)
library(scales)
library(maps)
library(rworldmap)
library(sf)
library(raster)
library(dplyr)
library(spData)
library(spDataLarge)
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(mapview) # for interactive maps
install.packages(spData)
install.packages("spData")
install.packages("sf")
install.packages("leaflet")
install.packages("leaflet")
install.packages("tmap")
# Load packages ----
library(shiny)
library(ggplot2)
library(tidyverse)
library(plyr)
library(dplyr)
library(plotly)
library(scales)
library(maps)
library(rworldmap)
library(sf)
library(raster)
library(dplyr)
library(spData)
library(spDataLarge)
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(mapview) # for interactive maps
install.packages("tmap")
install.packages("tmap")
# Load packages ----
library(shiny)
library(ggplot2)
library(tidyverse)
library(plyr)
library(dplyr)
library(plotly)
library(scales)
library(maps)
library(rworldmap)
library(sf)
library(raster)
library(dplyr)
library(spData)
library(spDataLarge)
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(mapview) # for interactive maps
library(tmap)    # for static and interactive maps
tm_shape(world)
install.packages("tmap")
install.packages("tmap")
library(tmap)    # for static and interactive maps
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases)) %>%
filter(dateRep == Sys.Date())
mapData <- joinCountryData2Map(data3, joinCode = "ISO3", nameJoinColumn = "countryterritoryCode")
library(shiny)
library(ggplot2)
library(tidyverse)
library(plyr)
library(dplyr)
library(plotly)
library(scales)
library(maps)
library(rworldmap)
library(sf)
library(raster)
library(dplyr)
library(spData)
library(spDataLarge)
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
library(mapview) # for interactive maps
# Load packages ----
library(shiny)
library(ggplot2)
library(tidyverse)
library(plyr)
library(dplyr)
library(plotly)
library(scales)
library(maps)
library(rworldmap)
library(sf)
library(raster)
library(dplyr)
library(spData)
library(leaflet) # for interactive maps
#these libraries are necessary
library(readxl)
library(httr)
#create the URL where the dataset is stored with automatic updates every day
url <- paste("https://www.ecdc.europa.eu/sites/default/files/documents/COVID-19-geographic-disbtribution-worldwide-",format(Sys.time(), "%Y-%m-%d"), ".xlsx", sep = "")
#download the dataset from the website to a local temporary file
GET(url, authenticate(":", ":", type="ntlm"), write_disk(tf <- tempfile(fileext = ".xlsx")))
#read the Dataset sheet into “R”
data <- read_excel(tf)
library(tidyverse)
library(lubridate)
#Completes list of dates, Each date with cases = NA -> cases = 0
data2<-data %>%
complete(countriesAndTerritories,dateRep, fill = list(cases = 0))
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases)) %>%
filter(dateRep == Sys.Date())
mapData <- joinCountryData2Map(data3, joinCode = "ISO3", nameJoinColumn = "countryterritoryCode")
#Cumulative Cases:
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases)) %>%
filter(dateRep == Sys.Date())
sPDF <- joinCountryData2Map(data3, joinCode = "ISO3", nameJoinColumn = "countryterritoryCode")
data(countryExData)
sPDF <- joinCountryData2Map( countryExData,
+  joinCode = "ISO3"
+  nameJoinColumn = "ISO3V10" )
data(countryExData)
head(countryExData)
data(countryExData)
sPDF <- joinCountryData2Map( countryExData, joinCode = "ISO3",  nameJoinColumn = "ISO3V10" )
data(countryExData)
sPDF <- joinCountryData2Map( countryExData, joinCode = "ISO3",  nameJoinColumn = "ISO3V10" )
mapCountryData( sPDF, nameColumnToPlot="BIODIVERSITY" )
runApp("corona", display.mode = "showcase")
View(countryExData)
View(countryExData)
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases)) %>%
filter(dateRep == Sys.Date())
mapData <- joinCountryData2Map(data3, joinCode = "ISO3", nameJoinColumn = "countryterritoryCode")
mapData <- joinCountryData2Map(data2, joinCode = "ISO3", nameJoinColumn = "countryterritoryCode")
mapData <- joinCountryData2Map(data3, joinCode = "ISO3", nameJoinColumn = "countryterritoryCode")
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases)) %>%
filter(dateRep == Sys.Date())
data3<-df(data3)
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases)) %>%
filter(dateRep == Sys.Date())
data3<-as.data.frame(data3)
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases)) %>%
filter(dateRep == Sys.Date())
data3<-as.data.frame(data3)
mapData <- joinCountryData2Map(data3, joinCode = "ISO3", nameJoinColumn = "countryterritoryCode")
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases)) %>%
filter(dateRep == Sys.Date())
data3<-as.data.frame(data3)
mapData <- joinCountryData2Map(data3, joinCode = "ISO3", nameJoinColumn = "countryterritoryCode")
output$worldmap <- renderPlot({ mapCountryData(mapData, nameColumnToPlot="cumsumCases" )
})
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
View(data2)
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp('corona')
runApp()
runApp('corona')
dateData
runApp('corona')
data3 <- data2 %>%
group_by(countriesAndTerritories) %>%
arrange(dateRep) %>%
mutate(cumsumCases = cumsum(cases)) %>%
filter(dateRep == Sys.Date())
#data3<-as.data.frame(data3)
mapData <- joinCountryData2Map(data3, joinCode = "ISO3", nameJoinColumn = "countryterritoryCode")
runApp('corona')
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
library(shiny)
library(shiny)
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
runApp("corona", display.mode = "showcase")
library(shiny)
runApp("corona", display.mode = "showcase")
# Load packages ----
library(shiny)
library(ggplot2)
library(tidyverse)
library(plyr)
library(dplyr)
library(plotly)
library(scales)
library(maps)
library(rworldmap)
library(sf)
library(raster)
library(dplyr)
library(spData)
library(leaflet) # for interactive maps
# Load packages ----
library(shiny)
library(ggplot2)
library(tidyverse)
library(plyr)
library(dplyr)
library(plotly)
library(scales)
library(maps)
library(rworldmap)
library(sf)
library(raster)
library(dplyr)
library(spData)
library(leaflet) # for interactive maps
install.packages("tmap")
install.packages("tmap")
library(tmap)
library(tmaptools)
tm_shape(nz)
library(tmap)
install.packages("units", type='binary')
install.packages("units", type = "binary")
install.packages("tmap")
library(tmap)
